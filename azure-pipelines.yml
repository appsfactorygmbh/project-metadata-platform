# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- develop
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: dotnetVersion
    value: 8.x
  - name: dockerRegistryServiceConnection
    value: 3d0f8345-5e44-44d3-af44-68f089b5d843 # SC-DockerHub
  - name: dockerImageRepository
    value: appsfactorylej/project-metadata-platform-backend
  - name: dockerfilePath
    value: Dockerfile
  - name: sonarCloudProjectKey
    value: "1efbc6d1-5ad3-4fc9-bcf7-070a68663af4_342d515e-e562-4bf9-951a-68c43423b028"
  - name: SonarCloudOrg
    value: "appsfactory"
  - name: today
    value: $[ format('{0:yyyy}.{0:MM}.{0:dd}-{0:HH}.{0:mm}', pipeline.startTime) ]
  - group: ProdCreds

stages:
  - stage: Test
    displayName: 'Test stage'
    jobs:
    - job : Test
      steps:

      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetVersion)'
        inputs:
          packageType: 'sdk'
          version: '$(dotnetVersion)'

      - task: DotNetCoreCLI@2
        displayName: Restore packages
        inputs:
          command: restore
          feedsToUse: select

      - task: DotNetCoreCLI@2
        displayName: 'Restore tools'
        inputs:
          command: custom
          custom: tool
          arguments: 'restore'

      - task: SonarCloudPrepare@3
        displayName: "Prepare analysis on SonarCloud"
        inputs:
          SonarCloud: "SC-SonarCloud-backend"
          organization: $(SonarCloudOrg)
          cliprojectKey: $(sonarCloudProjectKey)
          scannerMode: "CLI"
          configMode: manual
          extraProperties: |
                sonar.cs.vscoveragexml.reportsPaths=coverage.xml
                sonar.exclusions=/ProjectMetadataPlatform.Infrastructure/Migrations/**

      - script: |
          dotnet tool install --global csharpier
          export PATH="$PATH:$HOME/.dotnet/tools"
        displayName: "Install CSharpier"

      - script: csharpier check $(System.DefaultWorkingDirectory)
        displayName: "Verify Formatting"

      - script: dotnet tool run dotnet-coverage collect "dotnet test --no-restore --configuration Release" -f xml -o "coverage.xml"
        displayName: 'Unit Tests with Coverage'

      - task: PublishCodeCoverageResults@2
        displayName: Publish code coverage
        inputs:
          summaryFileLocation: "coverage.xml"

      - task: SonarCloudAnalyze@3
        displayName: "Run analysis on SonarCloud"

      - task: SonarCloudPublish@3
        displayName: "Publish results on SonarCloud"
        inputs:
          pollingTimeoutSec: "300"


  - stage: Build
    displayName: Build + Push Stage
    dependsOn: Test
    condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
    - job: Build
      displayName: Build job
      steps:

      - task: Docker@2
        displayName: Build docker image
        inputs:
          command: build
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: $(dockerImageRepository)
          Dockerfile: $(dockerfilePath)
          arguments: >-
            --build-arg BUILD_CONFIGURATION=Release
            --progress=plain
          tags: $(today),dev

      - task: Docker@2
        displayName: Push image to container registry with build number and prod tag
        inputs:
          command: push
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: $(dockerImageRepository)
          tags: $(today),dev

  - stage: DeployProd
    displayName: Deploy Production
    dependsOn: Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - job: DeployProd
      displayName: Deploy Production
      steps:
        - task: Docker@2
          displayName: Login to registry
          inputs:
            command: login
            containerRegistry: $(dockerRegistryServiceConnection)

        - script: docker pull $(dockerImageRepository):dev
          displayName: Pull dev image

        - script: docker tag $(dockerImageRepository):dev $(dockerImageRepository):prod
          displayName: Retag dev image

        - script: docker push $(dockerImageRepository):prod
          displayName: Push prod image to DockerHub

        - task: CopyFilesOverSSH@0
          displayName: Copy compose file to VM
          inputs:
            sshEndpoint: 'SC-AfItDocker01-VM'
            contents: '**/docker-compose-production.yml'
            targetFolder: '~/pmp-backend/'

        - task: SSH@0
          displayName: Add credentials to compose file + compose up
          inputs:
            sshEndpoint: 'SC-AfItDocker01-VM' # Service connection
            interactiveSession: true
            commands:  |
              sed -i -e "s/{PMP_DB_USER}/$(PMP_DB_USER)/g" -e "s/{PMP_DB_PASSWORD}/$(PMP_DB_PASSWORD)/g" -e "s/{PMP_DB_NAME}/$(PMP_DB_NAME)/g" -e "s/{JWT_ISSUER_SIGNING_KEY}/$(JWT_ISSUER_SIGNING_KEY)/g" -e "s/{PMP_ADMIN_PASSWORD}/$(PMP_ADMIN_PASSWORD)/g" ~/pmp-backend/docker-compose-production.yml
              echo $(DOCKER_HUB_PAT) | docker login -u $(DOCKER_HUB_NAME) --password-stdin
              docker compose -f ~/pmp-backend/docker-compose-production.yml pull
              docker compose -f ~/pmp-backend/docker-compose-production.yml up -d
              rm ~/.docker/config.json