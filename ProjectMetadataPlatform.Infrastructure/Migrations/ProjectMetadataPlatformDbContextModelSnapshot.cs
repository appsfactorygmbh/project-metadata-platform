// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectMetadataPlatform.Infrastructure.DataAccess;

#nullable disable

namespace ProjectMetadataPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ProjectMetadataPlatformDbContext))]
    partial class ProjectMetadataPlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Plugins.Plugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("PluginName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plugins");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            IsArchived = false,
                            PluginName = "Gitlab"
                        },
                        new
                        {
                            Id = 200,
                            IsArchived = false,
                            PluginName = "SonarQube"
                        },
                        new
                        {
                            Id = 300,
                            IsArchived = false,
                            PluginName = "Jira"
                        });
                });

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Plugins.ProjectPlugins", b =>
                {
                    b.Property<int>("PluginId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.HasKey("PluginId", "ProjectId", "Url");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPluginsRelation");

                    b.HasData(
                        new
                        {
                            PluginId = 100,
                            ProjectId = 100,
                            Url = "https://http.cat/status/100",
                            DisplayName = "Gitlab"
                        },
                        new
                        {
                            PluginId = 200,
                            ProjectId = 100,
                            Url = "https://http.cat/status/102",
                            DisplayName = "SonarQube"
                        },
                        new
                        {
                            PluginId = 300,
                            ProjectId = 100,
                            Url = "https://http.cat/status/200",
                            DisplayName = "Jira"
                        },
                        new
                        {
                            PluginId = 100,
                            ProjectId = 200,
                            Url = "https://http.cat/status/204",
                            DisplayName = "Gitlab"
                        },
                        new
                        {
                            PluginId = 200,
                            ProjectId = 200,
                            Url = "https://http.cat/status/401",
                            DisplayName = "SonarQube"
                        },
                        new
                        {
                            PluginId = 300,
                            ProjectId = 200,
                            Url = "https://http.cat/status/404",
                            DisplayName = "Jira"
                        },
                        new
                        {
                            PluginId = 100,
                            ProjectId = 300,
                            Url = "https://http.cat/status/406",
                            DisplayName = "Gitlab"
                        },
                        new
                        {
                            PluginId = 200,
                            ProjectId = 300,
                            Url = "https://http.cat/status/411",
                            DisplayName = "SonarQube"
                        },
                        new
                        {
                            PluginId = 300,
                            ProjectId = 300,
                            Url = "https://http.cat/status/414",
                            DisplayName = "Jira"
                        });
                });

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            BusinessUnit = "Unit 1",
                            ClientName = "Deutsche Bahn",
                            Department = "Department 1",
                            ProjectName = "DB App",
                            TeamNumber = 1
                        },
                        new
                        {
                            Id = 200,
                            BusinessUnit = "Unit 2",
                            ClientName = "ARD",
                            Department = "Department 2",
                            ProjectName = "Tagesschau App",
                            TeamNumber = 2
                        },
                        new
                        {
                            Id = 300,
                            BusinessUnit = "Unit 3",
                            ClientName = "AOK",
                            Department = "Department 3",
                            ProjectName = "AOK Bonus App",
                            TeamNumber = 3
                        });
                });

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Plugins.ProjectPlugins", b =>
                {
                    b.HasOne("ProjectMetadataPlatform.Domain.Plugins.Plugin", "Plugin")
                        .WithMany("ProjectPlugins")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectMetadataPlatform.Domain.Projects.Project", "Project")
                        .WithMany("ProjectPlugins")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Plugins.Plugin", b =>
                {
                    b.Navigation("ProjectPlugins");
                });

            modelBuilder.Entity("ProjectMetadataPlatform.Domain.Projects.Project", b =>
                {
                    b.Navigation("ProjectPlugins");
                });
#pragma warning restore 612, 618
        }
    }
}
