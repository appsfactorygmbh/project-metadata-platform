/* tslint:disable */

/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GetTeamResponse } from './GetTeamResponse';
import {
  GetTeamResponseFromJSON,
  GetTeamResponseToJSON,
} from './GetTeamResponse';
import type { SecurityLevel } from './SecurityLevel';
import { SecurityLevelFromJSON, SecurityLevelToJSON } from './SecurityLevel';

/**
 * Represents a response for the GetProjects API call.
 * @export
 * @interface GetProjectsResponse
 */
export interface GetProjectsResponse {
  /**
   * The id of the project.
   * @type {number}
   * @memberof GetProjectsResponse
   */
  id: number;
  /**
   * The Slug for the project name.
   * @type {string}
   * @memberof GetProjectsResponse
   */
  slug: string;
  /**
   * The name of the project.
   * @type {string}
   * @memberof GetProjectsResponse
   */
  projectName: string;
  /**
   * The name of the client associated with the project.
   * @type {string}
   * @memberof GetProjectsResponse
   */
  clientName: string;
  /**
   * The company associated with the project.
   * @type {string}
   * @memberof GetProjectsResponse
   */
  company: string;
  /**
   * If the project is archived or not.
   * @type {boolean}
   * @memberof GetProjectsResponse
   */
  isArchived: boolean;
  /**
   *
   * @type {GetTeamResponse}
   * @memberof GetProjectsResponse
   */
  team?: GetTeamResponse;
  /**
   *
   * @type {SecurityLevel}
   * @memberof GetProjectsResponse
   */
  ismsLevel: SecurityLevel;
  /**
   * Additonal Notes on the project
   * @type {string}
   * @memberof GetProjectsResponse
   */
  notes: string;
}

/**
 * Check if a given object implements the GetProjectsResponse interface.
 */
export function instanceOfGetProjectsResponse(
  value: object,
): value is GetProjectsResponse {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('slug' in value) || value['slug'] === undefined) return false;
  if (!('projectName' in value) || value['projectName'] === undefined)
    return false;
  if (!('clientName' in value) || value['clientName'] === undefined)
    return false;
  if (!('company' in value) || value['company'] === undefined) return false;
  if (!('isArchived' in value) || value['isArchived'] === undefined)
    return false;
  if (!('ismsLevel' in value) || value['ismsLevel'] === undefined) return false;
  if (!('notes' in value) || value['notes'] === undefined) return false;
  return true;
}

export function GetProjectsResponseFromJSON(json: any): GetProjectsResponse {
  return GetProjectsResponseFromJSONTyped(json, false);
}

export function GetProjectsResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GetProjectsResponse {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    slug: json['slug'],
    projectName: json['projectName'],
    clientName: json['clientName'],
    company: json['company'],
    isArchived: json['isArchived'],
    team:
      json['team'] == null ? undefined : GetTeamResponseFromJSON(json['team']),
    ismsLevel: SecurityLevelFromJSON(json['ismsLevel']),
    notes: json['notes'],
  };
}

export function GetProjectsResponseToJSON(json: any): GetProjectsResponse {
  return GetProjectsResponseToJSONTyped(json, false);
}

export function GetProjectsResponseToJSONTyped(
  value?: GetProjectsResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    slug: value['slug'],
    projectName: value['projectName'],
    clientName: value['clientName'],
    company: value['company'],
    isArchived: value['isArchived'],
    team: GetTeamResponseToJSON(value['team']),
    ismsLevel: SecurityLevelToJSON(value['ismsLevel']),
    notes: value['notes'],
  };
}
