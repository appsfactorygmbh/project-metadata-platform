/* tslint:disable */
 
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  GetPluginResponse,
  GetProjectResponse,
  GetProjectsResponse,
  PutProjectRequest,
  PutProjectResponse,
  SecurityLevel,
} from '../models/index';
import {
  GetPluginResponseFromJSON,
  GetProjectResponseFromJSON,
  GetProjectsResponseFromJSON,
  PutProjectRequestToJSON,
  PutProjectResponseFromJSON,
} from '../models/index';

export interface ProjectsGetRequest {
  projectName?: string;
  clientName?: string;
  businessUnit?: Array<string>;
  teamName?: Array<string>;
  isArchived?: boolean;
  company?: Array<string>;
  ismsLevel?: SecurityLevel;
  search?: string;
}

export interface ProjectsIdDeleteRequest {
  id: number;
}

export interface ProjectsIdGetRequest {
  id: number;
}

export interface ProjectsIdPluginsGetRequest {
  id: number;
}

export interface ProjectsIdUnarchivedPluginsGetRequest {
  id: number;
}

export interface ProjectsPutRequest {
  projectId?: number;
  putProjectRequest?: PutProjectRequest;
}

export interface ProjectsSlugDeleteRequest {
  slug: string;
}

export interface ProjectsSlugGetRequest {
  slug: string;
}

export interface ProjectsSlugPluginsGetRequest {
  slug: string;
}

export interface ProjectsSlugPutRequest {
  slug: string;
  putProjectRequest?: PutProjectRequest;
}

export interface ProjectsSlugUnarchivedPluginsGetRequest {
  slug: string;
}

/**
 * ProjectsApi - interface
 *
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
  /**
   *
   * @summary Gets all projects or all projects that match the given search string. Also orders response alphabetical by ClientName and then by ProjectName
   * @param {string} [projectName] Optional. The name of the project to filter by.
   * @param {string} [clientName] Optional. The name of the client associated with the project to filter by.
   * @param {Array<string>} [businessUnit] Optional. A list of business units to filter the projects by.
   * @param {Array<string>} [teamName] Optional. A list of team names to filter the projects by.
   * @param {boolean} [isArchived] Optional. The archival status of the projects to filter by.
   * @param {Array<string>} [company] Optional. A list of companies to filter the projects by.
   * @param {SecurityLevel} [ismsLevel] Optional. The ISMS level to filter the projects by.
   * @param {string} [search] Search string to filter the projects by.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsGetRaw(
    requestParameters: ProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetProjectsResponse>>>;

  /**
   * Gets all projects or all projects that match the given search string. Also orders response alphabetical by ClientName and then by ProjectName
   */
  projectsGet(
    requestParameters: ProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetProjectsResponse>>;

  /**
   *
   * @summary Deletes the project with the given id.
   * @param {number} id The id of the project to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsIdDeleteRaw(
    requestParameters: ProjectsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Deletes the project with the given id.
   */
  projectsIdDelete(
    requestParameters: ProjectsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Gets the project with the given id.
   * @param {number} id The id of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsIdGetRaw(
    requestParameters: ProjectsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectResponse>>;

  /**
   * Gets the project with the given id.
   */
  projectsIdGet(
    requestParameters: ProjectsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectResponse>;

  /**
   *
   * @summary Gets all the plugins of the project with the given id.
   * @param {number} id The id of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsIdPluginsGetRaw(
    requestParameters: ProjectsIdPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>>;

  /**
   * Gets all the plugins of the project with the given id.
   */
  projectsIdPluginsGet(
    requestParameters: ProjectsIdPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>>;

  /**
   *
   * @summary Gets all the unarchived plugins of the project with the given id.
   * @param {number} id The id of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsIdUnarchivedPluginsGetRaw(
    requestParameters: ProjectsIdUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>>;

  /**
   * Gets all the unarchived plugins of the project with the given id.
   */
  projectsIdUnarchivedPluginsGet(
    requestParameters: ProjectsIdUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>>;

  /**
   *
   * @summary Creates a new project or updates the one with given id.
   * @param {number} [projectId] The id, if an existing project should be overwritten.
   * @param {PutProjectRequest} [putProjectRequest] The data of the new project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsPutRaw(
    requestParameters: ProjectsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PutProjectResponse>>;

  /**
   * Creates a new project or updates the one with given id.
   */
  projectsPut(
    requestParameters: ProjectsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PutProjectResponse>;

  /**
   *
   * @summary Deletes the project with the given slug.
   * @param {string} slug The slug of the project to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsSlugDeleteRaw(
    requestParameters: ProjectsSlugDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Deletes the project with the given slug.
   */
  projectsSlugDelete(
    requestParameters: ProjectsSlugDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Gets the project with the given slug.
   * @param {string} slug The slug of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsSlugGetRaw(
    requestParameters: ProjectsSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectResponse>>;

  /**
   * Gets the project with the given slug.
   */
  projectsSlugGet(
    requestParameters: ProjectsSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectResponse>;

  /**
   *
   * @summary Gets all the plugins of the project with the given id.
   * @param {string} slug The slug of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsSlugPluginsGetRaw(
    requestParameters: ProjectsSlugPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>>;

  /**
   * Gets all the plugins of the project with the given id.
   */
  projectsSlugPluginsGet(
    requestParameters: ProjectsSlugPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>>;

  /**
   *
   * @summary Creates a new project or updates the one with given slug.
   * @param {string} slug The slug, if an existing project should be overwritten.
   * @param {PutProjectRequest} [putProjectRequest] The data of the new project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsSlugPutRaw(
    requestParameters: ProjectsSlugPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PutProjectResponse>>;

  /**
   * Creates a new project or updates the one with given slug.
   */
  projectsSlugPut(
    requestParameters: ProjectsSlugPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PutProjectResponse>;

  /**
   *
   * @summary Gets all the unarchived plugins of the project with the given slug.
   * @param {string} slug The slug of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApiInterface
   */
  projectsSlugUnarchivedPluginsGetRaw(
    requestParameters: ProjectsSlugUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>>;

  /**
   * Gets all the unarchived plugins of the project with the given slug.
   */
  projectsSlugUnarchivedPluginsGet(
    requestParameters: ProjectsSlugUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>>;
}

/**
 *
 */
export class ProjectsApi
  extends runtime.BaseAPI
  implements ProjectsApiInterface
{
  /**
   * Gets all projects or all projects that match the given search string. Also orders response alphabetical by ClientName and then by ProjectName
   */
  async projectsGetRaw(
    requestParameters: ProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetProjectsResponse>>> {
    const queryParameters: any = {};

    if (requestParameters['projectName'] != null) {
      queryParameters['ProjectName'] = requestParameters['projectName'];
    }

    if (requestParameters['clientName'] != null) {
      queryParameters['ClientName'] = requestParameters['clientName'];
    }

    if (requestParameters['businessUnit'] != null) {
      queryParameters['BusinessUnit'] = requestParameters['businessUnit'];
    }

    if (requestParameters['teamName'] != null) {
      queryParameters['TeamName'] = requestParameters['teamName'];
    }

    if (requestParameters['isArchived'] != null) {
      queryParameters['IsArchived'] = requestParameters['isArchived'];
    }

    if (requestParameters['company'] != null) {
      queryParameters['Company'] = requestParameters['company'];
    }

    if (requestParameters['ismsLevel'] != null) {
      queryParameters['IsmsLevel'] = requestParameters['ismsLevel'];
    }

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetProjectsResponseFromJSON),
    );
  }

  /**
   * Gets all projects or all projects that match the given search string. Also orders response alphabetical by ClientName and then by ProjectName
   */
  async projectsGet(
    requestParameters: ProjectsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetProjectsResponse>> {
    const response = await this.projectsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Deletes the project with the given id.
   */
  async projectsIdDeleteRaw(
    requestParameters: ProjectsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling projectsIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the project with the given id.
   */
  async projectsIdDelete(
    requestParameters: ProjectsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.projectsIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets the project with the given id.
   */
  async projectsIdGetRaw(
    requestParameters: ProjectsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling projectsIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectResponseFromJSON(jsonValue),
    );
  }

  /**
   * Gets the project with the given id.
   */
  async projectsIdGet(
    requestParameters: ProjectsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectResponse> {
    const response = await this.projectsIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all the plugins of the project with the given id.
   */
  async projectsIdPluginsGetRaw(
    requestParameters: ProjectsIdPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling projectsIdPluginsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{id}/plugins`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetPluginResponseFromJSON),
    );
  }

  /**
   * Gets all the plugins of the project with the given id.
   */
  async projectsIdPluginsGet(
    requestParameters: ProjectsIdPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>> {
    const response = await this.projectsIdPluginsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all the unarchived plugins of the project with the given id.
   */
  async projectsIdUnarchivedPluginsGetRaw(
    requestParameters: ProjectsIdUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling projectsIdUnarchivedPluginsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{id}/unarchivedPlugins`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetPluginResponseFromJSON),
    );
  }

  /**
   * Gets all the unarchived plugins of the project with the given id.
   */
  async projectsIdUnarchivedPluginsGet(
    requestParameters: ProjectsIdUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>> {
    const response = await this.projectsIdUnarchivedPluginsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Creates a new project or updates the one with given id.
   */
  async projectsPutRaw(
    requestParameters: ProjectsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PutProjectResponse>> {
    const queryParameters: any = {};

    if (requestParameters['projectId'] != null) {
      queryParameters['projectId'] = requestParameters['projectId'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PutProjectRequestToJSON(requestParameters['putProjectRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PutProjectResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new project or updates the one with given id.
   */
  async projectsPut(
    requestParameters: ProjectsPutRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PutProjectResponse> {
    const response = await this.projectsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Deletes the project with the given slug.
   */
  async projectsSlugDeleteRaw(
    requestParameters: ProjectsSlugDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling projectsSlugDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{slug}`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the project with the given slug.
   */
  async projectsSlugDelete(
    requestParameters: ProjectsSlugDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.projectsSlugDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets the project with the given slug.
   */
  async projectsSlugGetRaw(
    requestParameters: ProjectsSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectResponse>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling projectsSlugGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{slug}`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectResponseFromJSON(jsonValue),
    );
  }

  /**
   * Gets the project with the given slug.
   */
  async projectsSlugGet(
    requestParameters: ProjectsSlugGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectResponse> {
    const response = await this.projectsSlugGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all the plugins of the project with the given id.
   */
  async projectsSlugPluginsGetRaw(
    requestParameters: ProjectsSlugPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling projectsSlugPluginsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{slug}/plugins`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetPluginResponseFromJSON),
    );
  }

  /**
   * Gets all the plugins of the project with the given id.
   */
  async projectsSlugPluginsGet(
    requestParameters: ProjectsSlugPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>> {
    const response = await this.projectsSlugPluginsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Creates a new project or updates the one with given slug.
   */
  async projectsSlugPutRaw(
    requestParameters: ProjectsSlugPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PutProjectResponse>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling projectsSlugPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{slug}`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PutProjectRequestToJSON(requestParameters['putProjectRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PutProjectResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new project or updates the one with given slug.
   */
  async projectsSlugPut(
    requestParameters: ProjectsSlugPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PutProjectResponse> {
    const response = await this.projectsSlugPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all the unarchived plugins of the project with the given slug.
   */
  async projectsSlugUnarchivedPluginsGetRaw(
    requestParameters: ProjectsSlugUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPluginResponse>>> {
    if (requestParameters['slug'] == null) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter "slug" was null or undefined when calling projectsSlugUnarchivedPluginsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Projects/{slug}/unarchivedPlugins`.replace(
          `{${'slug'}}`,
          encodeURIComponent(String(requestParameters['slug'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetPluginResponseFromJSON),
    );
  }

  /**
   * Gets all the unarchived plugins of the project with the given slug.
   */
  async projectsSlugUnarchivedPluginsGet(
    requestParameters: ProjectsSlugUnarchivedPluginsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPluginResponse>> {
    const response = await this.projectsSlugUnarchivedPluginsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
