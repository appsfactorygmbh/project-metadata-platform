/* tslint:disable */
/* eslint-disable */
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProjectRequest,
  CreateProjectResponse,
  GetPluginResponse,
  GetProjectResponse,
  GetProjectsResponse,
  ProblemDetails,
} from '../models/index';
import {
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    CreateProjectResponseFromJSON,
    CreateProjectResponseToJSON,
    GetPluginResponseFromJSON,
    GetPluginResponseToJSON,
    GetProjectResponseFromJSON,
    GetProjectResponseToJSON,
    GetProjectsResponseFromJSON,
    GetProjectsResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ProjectsGetRequest {
    projectName?: string;
    clientName?: string;
    businessUnit?: Array<string>;
    teamNumber?: Array<number>;
    search?: string;
}

export interface ProjectsIdGetRequest {
    id: number;
}

export interface ProjectsIdPluginsGetRequest {
    id: number;
}

export interface ProjectsPutRequest {
    projectId?: number;
    createProjectRequest?: CreateProjectRequest;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the business units.  It then returns a distinct list of these business units. This can be useful for filtering projects by business unit  or simply to obtain an overview of all business units involved in the projects.
     * @summary Retrieves a distinct list of all business units from the projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsFilterDataBusinessunitsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the business units.  It then returns a distinct list of these business units. This can be useful for filtering projects by business unit  or simply to obtain an overview of all business units involved in the projects.
     * Retrieves a distinct list of all business units from the projects.
     */
    projectsFilterDataBusinessunitsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the team numbers.  It then returns a distinct list of these team numbers. This can be useful for filtering projects by team number  or simply to obtain an overview of all team numbers involved in the projects.
     * @summary Retrieves a distinct list of all team numbers from the projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsFilterDataTeamnumbersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>>;

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the team numbers.  It then returns a distinct list of these team numbers. This can be useful for filtering projects by team number  or simply to obtain an overview of all team numbers involved in the projects.
     * Retrieves a distinct list of all team numbers from the projects.
     */
    projectsFilterDataTeamnumbersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>>;

    /**
     * 
     * @summary Gets all projects or all projects that match the given search string.
     * @param {string} [projectName] Optional. The name of the project to filter by.
     * @param {string} [clientName] Optional. The name of the client associated with the project to filter by.
     * @param {Array<string>} [businessUnit] Optional. A list of business units to filter the projects by.
     * @param {Array<number>} [teamNumber] Optional. A list of team numbers to filter the projects by.
     * @param {string} [search] Search string to filter the projects by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsGetRaw(requestParameters: ProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProjectsResponse>>>;

    /**
     * Gets all projects or all projects that match the given search string.
     */
    projectsGet(requestParameters: ProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProjectsResponse>>;

    /**
     * 
     * @summary Gets the project with the given id.
     * @param {number} id The id of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsIdGetRaw(requestParameters: ProjectsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectResponse>>;

    /**
     * Gets the project with the given id.
     */
    projectsIdGet(requestParameters: ProjectsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectResponse>;

    /**
     * 
     * @summary Gets all the plugins of the project with the given id.
     * @param {number} id The id of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsIdPluginsGetRaw(requestParameters: ProjectsIdPluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetPluginResponse>>>;

    /**
     * Gets all the plugins of the project with the given id.
     */
    projectsIdPluginsGet(requestParameters: ProjectsIdPluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetPluginResponse>>;

    /**
     * 
     * @summary Creates a new project or updates the one with given id.
     * @param {number} [projectId] The id, if an existing project should be overwritten.
     * @param {CreateProjectRequest} [createProjectRequest] The data of the new project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsPutRaw(requestParameters: ProjectsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProjectResponse>>;

    /**
     * Creates a new project or updates the one with given id.
     */
    projectsPut(requestParameters: ProjectsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProjectResponse>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the business units.  It then returns a distinct list of these business units. This can be useful for filtering projects by business unit  or simply to obtain an overview of all business units involved in the projects.
     * Retrieves a distinct list of all business units from the projects.
     */
    async projectsFilterDataBusinessunitsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects/filterData/businessunits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the business units.  It then returns a distinct list of these business units. This can be useful for filtering projects by business unit  or simply to obtain an overview of all business units involved in the projects.
     * Retrieves a distinct list of all business units from the projects.
     */
    async projectsFilterDataBusinessunitsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.projectsFilterDataBusinessunitsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the team numbers.  It then returns a distinct list of these team numbers. This can be useful for filtering projects by team number  or simply to obtain an overview of all team numbers involved in the projects.
     * Retrieves a distinct list of all team numbers from the projects.
     */
    async projectsFilterDataTeamnumbersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects/filterData/teamnumbers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint queries all projects without any filter (empty search string) and extracts the team numbers.  It then returns a distinct list of these team numbers. This can be useful for filtering projects by team number  or simply to obtain an overview of all team numbers involved in the projects.
     * Retrieves a distinct list of all team numbers from the projects.
     */
    async projectsFilterDataTeamnumbersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.projectsFilterDataTeamnumbersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets all projects or all projects that match the given search string.
     */
    async projectsGetRaw(requestParameters: ProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProjectsResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['projectName'] != null) {
            queryParameters['ProjectName'] = requestParameters['projectName'];
        }

        if (requestParameters['clientName'] != null) {
            queryParameters['ClientName'] = requestParameters['clientName'];
        }

        if (requestParameters['businessUnit'] != null) {
            queryParameters['BusinessUnit'] = requestParameters['businessUnit'];
        }

        if (requestParameters['teamNumber'] != null) {
            queryParameters['TeamNumber'] = requestParameters['teamNumber'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProjectsResponseFromJSON));
    }

    /**
     * Gets all projects or all projects that match the given search string.
     */
    async projectsGet(requestParameters: ProjectsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProjectsResponse>> {
        const response = await this.projectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the project with the given id.
     */
    async projectsIdGetRaw(requestParameters: ProjectsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectResponseFromJSON(jsonValue));
    }

    /**
     * Gets the project with the given id.
     */
    async projectsIdGet(requestParameters: ProjectsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectResponse> {
        const response = await this.projectsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the plugins of the project with the given id.
     */
    async projectsIdPluginsGetRaw(requestParameters: ProjectsIdPluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetPluginResponse>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdPluginsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects/{id}/plugins`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetPluginResponseFromJSON));
    }

    /**
     * Gets all the plugins of the project with the given id.
     */
    async projectsIdPluginsGet(requestParameters: ProjectsIdPluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetPluginResponse>> {
        const response = await this.projectsIdPluginsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new project or updates the one with given id.
     */
    async projectsPutRaw(requestParameters: ProjectsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProjectResponse>> {
        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Projects`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters['createProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProjectResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new project or updates the one with given id.
     */
    async projectsPut(requestParameters: ProjectsPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProjectResponse> {
        const response = await this.projectsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
