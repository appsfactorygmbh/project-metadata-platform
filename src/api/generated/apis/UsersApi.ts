/* tslint:disable */

/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateUserRequest,
  CreateUserResponse,
  GetUserResponse,
  PatchUserRequest,
  ProblemDetails,
} from '../models/index';
import {
  CreateUserRequestToJSON,
  CreateUserResponseFromJSON,
  GetUserResponseFromJSON,
  PatchUserRequestToJSON,
} from '../models/index';

export interface UsersPutRequest {
  createUserRequest?: CreateUserRequest;
}

export interface UsersUserIdDeleteRequest {
  userId: string;
}

export interface UsersUserIdGetRequest {
  userId: string;
}

export interface UsersUserIdPatchRequest {
  userId: string;
  patchUserRequest?: PatchUserRequest;
}

/**
 * UsersApi - interface
 *
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
  /**
   *
   * @summary Gets all users.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetUserResponse>>>;

  /**
   * Gets all users.
   */
  usersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetUserResponse>>;

  /**
   *
   * @summary Gets the current authenticated user\'s information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>>;

  /**
   * Gets the current authenticated user\'s information.
   */
  usersMeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse>;

  /**
   *
   * @summary Creates a new user.
   * @param {CreateUserRequest} [createUserRequest] Request containing user information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersPutRaw(
    requestParameters: UsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUserResponse>>;

  /**
   * Creates a new user.
   */
  usersPut(
    requestParameters: UsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUserResponse>;

  /**
   *
   * @summary Deletes a user by their userId.
   * @param {string} userId The userId of the user to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersUserIdDeleteRaw(
    requestParameters: UsersUserIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Deletes a user by their userId.
   */
  usersUserIdDelete(
    requestParameters: UsersUserIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Gets a user by their ID.
   * @param {string} userId The ID of the user to retrieve.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersUserIdGetRaw(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>>;

  /**
   * Gets a user by their ID.
   */
  usersUserIdGet(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse>;

  /**
   *
   * @summary Patches the user information.
   * @param {string} userId The unique identifier of the user to be patched.
   * @param {PatchUserRequest} [patchUserRequest] The request model containing the new user information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  usersUserIdPatchRaw(
    requestParameters: UsersUserIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>>;

  /**
   * Patches the user information.
   */
  usersUserIdPatch(
    requestParameters: UsersUserIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse>;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {
  /**
   * Gets all users.
   */
  async usersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetUserResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetUserResponseFromJSON),
    );
  }

  /**
   * Gets all users.
   */
  async usersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetUserResponse>> {
    const response = await this.usersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Gets the current authenticated user\'s information.
   */
  async usersMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users/Me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Gets the current authenticated user\'s information.
   */
  async usersMeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse> {
    const response = await this.usersMeGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Creates a new user.
   */
  async usersPutRaw(
    requestParameters: UsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUserResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserRequestToJSON(requestParameters['createUserRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new user.
   */
  async usersPut(
    requestParameters: UsersPutRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUserResponse> {
    const response = await this.usersPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Deletes a user by their userId.
   */
  async usersUserIdDeleteRaw(
    requestParameters: UsersUserIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling usersUserIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users/{userId}`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters['userId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user by their userId.
   */
  async usersUserIdDelete(
    requestParameters: UsersUserIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.usersUserIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets a user by their ID.
   */
  async usersUserIdGetRaw(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling usersUserIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users/{userId}`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters['userId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Gets a user by their ID.
   */
  async usersUserIdGet(
    requestParameters: UsersUserIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse> {
    const response = await this.usersUserIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Patches the user information.
   */
  async usersUserIdPatchRaw(
    requestParameters: UsersUserIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserResponse>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling usersUserIdPatch().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Users/{userId}`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters['userId'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchUserRequestToJSON(requestParameters['patchUserRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserResponseFromJSON(jsonValue),
    );
  }

  /**
   * Patches the user information.
   */
  async usersUserIdPatch(
    requestParameters: UsersUserIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserResponse> {
    const response = await this.usersUserIdPatchRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
