/* tslint:disable */
/* eslint-disable */
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreatePluginRequest,
  CreatePluginResponse,
  DeleteGlobalPluginResponse,
  ErrorResponse,
  GetGlobalPluginResponse,
  PatchGlobalPluginRequest,
} from '../models/index';
import {
  CreatePluginRequestFromJSON,
  CreatePluginRequestToJSON,
  CreatePluginResponseFromJSON,
  CreatePluginResponseToJSON,
  DeleteGlobalPluginResponseFromJSON,
  DeleteGlobalPluginResponseToJSON,
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  GetGlobalPluginResponseFromJSON,
  GetGlobalPluginResponseToJSON,
  PatchGlobalPluginRequestFromJSON,
  PatchGlobalPluginRequestToJSON,
} from '../models/index';

export interface PluginsPluginIdDeleteRequest {
  pluginId: number;
}

export interface PluginsPluginIdPatchRequest {
  pluginId: number;
  patchGlobalPluginRequest?: PatchGlobalPluginRequest;
}

export interface PluginsPutRequest {
  createPluginRequest?: CreatePluginRequest;
}

/**
 * PluginsApi - interface
 *
 * @export
 * @interface PluginsApiInterface
 */
export interface PluginsApiInterface {
  /**
   *
   * @summary Gets all global plugins.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginsApiInterface
   */
  pluginsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetGlobalPluginResponse>>>;

  /**
   * Gets all global plugins.
   */
  pluginsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetGlobalPluginResponse>>;

  /**
   *
   * @summary Deletes a plugin by its ID.
   * @param {number} pluginId The unique identifier of the plugin to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginsApiInterface
   */
  pluginsPluginIdDeleteRaw(
    requestParameters: PluginsPluginIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteGlobalPluginResponse>>;

  /**
   * Deletes a plugin by its ID.
   */
  pluginsPluginIdDelete(
    requestParameters: PluginsPluginIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteGlobalPluginResponse>;

  /**
   *
   * @summary Updates a global plugin.
   * @param {number} pluginId The id of the plugin to update.
   * @param {PatchGlobalPluginRequest} [patchGlobalPluginRequest] The request body containing the details of the global plugin to be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginsApiInterface
   */
  pluginsPluginIdPatchRaw(
    requestParameters: PluginsPluginIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetGlobalPluginResponse>>;

  /**
   * Updates a global plugin.
   */
  pluginsPluginIdPatch(
    requestParameters: PluginsPluginIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetGlobalPluginResponse>;

  /**
   *
   * @summary Creates a new plugin with the given name.
   * @param {CreatePluginRequest} [createPluginRequest] The request body.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginsApiInterface
   */
  pluginsPutRaw(
    requestParameters: PluginsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePluginResponse>>;

  /**
   * Creates a new plugin with the given name.
   */
  pluginsPut(
    requestParameters: PluginsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePluginResponse>;
}

/**
 *
 */
export class PluginsApi extends runtime.BaseAPI implements PluginsApiInterface {
  /**
   * Gets all global plugins.
   */
  async pluginsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetGlobalPluginResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Plugins`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetGlobalPluginResponseFromJSON),
    );
  }

  /**
   * Gets all global plugins.
   */
  async pluginsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetGlobalPluginResponse>> {
    const response = await this.pluginsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Deletes a plugin by its ID.
   */
  async pluginsPluginIdDeleteRaw(
    requestParameters: PluginsPluginIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteGlobalPluginResponse>> {
    if (requestParameters['pluginId'] == null) {
      throw new runtime.RequiredError(
        'pluginId',
        'Required parameter "pluginId" was null or undefined when calling pluginsPluginIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Plugins/{pluginId}`.replace(
          `{${'pluginId'}}`,
          encodeURIComponent(String(requestParameters['pluginId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteGlobalPluginResponseFromJSON(jsonValue),
    );
  }

  /**
   * Deletes a plugin by its ID.
   */
  async pluginsPluginIdDelete(
    requestParameters: PluginsPluginIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteGlobalPluginResponse> {
    const response = await this.pluginsPluginIdDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Updates a global plugin.
   */
  async pluginsPluginIdPatchRaw(
    requestParameters: PluginsPluginIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetGlobalPluginResponse>> {
    if (requestParameters['pluginId'] == null) {
      throw new runtime.RequiredError(
        'pluginId',
        'Required parameter "pluginId" was null or undefined when calling pluginsPluginIdPatch().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Plugins/{pluginId}`.replace(
          `{${'pluginId'}}`,
          encodeURIComponent(String(requestParameters['pluginId'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchGlobalPluginRequestToJSON(
          requestParameters['patchGlobalPluginRequest'],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetGlobalPluginResponseFromJSON(jsonValue),
    );
  }

  /**
   * Updates a global plugin.
   */
  async pluginsPluginIdPatch(
    requestParameters: PluginsPluginIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetGlobalPluginResponse> {
    const response = await this.pluginsPluginIdPatchRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Creates a new plugin with the given name.
   */
  async pluginsPutRaw(
    requestParameters: PluginsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePluginResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Plugins`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreatePluginRequestToJSON(
          requestParameters['createPluginRequest'],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePluginResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new plugin with the given name.
   */
  async pluginsPut(
    requestParameters: PluginsPutRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePluginResponse> {
    const response = await this.pluginsPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
