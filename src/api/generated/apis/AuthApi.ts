/* tslint:disable */
/* eslint-disable */
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginRequest,
  LoginResponse,
} from '../models/index';
import {
    LoginRequestToJSON,
    LoginResponseFromJSON,
} from '../models/index';

export interface AuthBasicPostRequest {
    loginRequest?: LoginRequest;
}

export interface AuthRefreshGetRequest {
    authorization?: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Logs in a user with the given credentials.
     * @param {LoginRequest} [loginRequest] The request body containing email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authBasicPostRaw(requestParameters: AuthBasicPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Logs in a user with the given credentials.
     */
    authBasicPost(requestParameters: AuthBasicPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse>;

    /**
     * 
     * @summary Returns a new access token using the given refresh token.
     * @param {string} [authorization] Refresh Token header in the format \&#39;Refresh refreshToken\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefreshGetRaw(requestParameters: AuthRefreshGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Returns a new access token using the given refresh token.
     */
    authRefreshGet(requestParameters: AuthRefreshGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Logs in a user with the given credentials.
     */
    async authBasicPostRaw(requestParameters: AuthBasicPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Auth/basic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in a user with the given credentials.
     */
    async authBasicPost(requestParameters: AuthBasicPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.authBasicPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a new access token using the given refresh token.
     */
    async authRefreshGetRaw(requestParameters: AuthRefreshGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Auth/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Returns a new access token using the given refresh token.
     */
    async authRefreshGet(requestParameters: AuthRefreshGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.authRefreshGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
