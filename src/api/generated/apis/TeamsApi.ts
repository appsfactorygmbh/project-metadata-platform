/* tslint:disable */
 
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateTeamRequest,
  CreateTeamResponse,
  DeleteTeamResponse,
  GetLinkedProjectsResponse,
  GetTeamResponse,
  PatchTeamRequest,
} from '../models/index';
import {
  CreateTeamRequestToJSON,
  CreateTeamResponseFromJSON,
  DeleteTeamResponseFromJSON,
  GetLinkedProjectsResponseFromJSON,
  GetTeamResponseFromJSON,
  PatchTeamRequestToJSON,
} from '../models/index';

export interface TeamsGetRequest {
  teamName?: string;
  search?: string;
}

export interface TeamsIdGetRequest {
  id: number;
}

export interface TeamsPutRequest {
  createTeamRequest?: CreateTeamRequest;
}

export interface TeamsTeamIdDeleteRequest {
  teamId: number;
}

export interface TeamsTeamIdLinkedProjectsGetRequest {
  teamId: number;
}

export interface TeamsTeamIdPatchRequest {
  teamId: number;
  patchTeamRequest?: PatchTeamRequest;
}

/**
 * TeamsApi - interface
 *
 * @export
 * @interface TeamsApiInterface
 */
export interface TeamsApiInterface {
  /**
   *
   * @summary Gets all teams that match the given filters. Filters are optional.
   * @param {string} [teamName] Search string to filter teams with that team name.
   * @param {string} [search] Search string to filter the teams by (across all attributes).
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsGetRaw(
    requestParameters: TeamsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetTeamResponse>>>;

  /**
   * Gets all teams that match the given filters. Filters are optional.
   */
  teamsGet(
    requestParameters: TeamsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetTeamResponse>>;

  /**
   *
   * @summary Gets the team with the given id.
   * @param {number} id The id of the team.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsIdGetRaw(
    requestParameters: TeamsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTeamResponse>>;

  /**
   * Gets the team with the given id.
   */
  teamsIdGet(
    requestParameters: TeamsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTeamResponse>;

  /**
   *
   * @summary Creates a new team with the given attributes.
   * @param {CreateTeamRequest} [createTeamRequest] The request body.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsPutRaw(
    requestParameters: TeamsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateTeamResponse>>;

  /**
   * Creates a new team with the given attributes.
   */
  teamsPut(
    requestParameters: TeamsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateTeamResponse>;

  /**
   *
   * @summary Deletes a team by its ID.
   * @param {number} teamId The unique identifier of the team to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsTeamIdDeleteRaw(
    requestParameters: TeamsTeamIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteTeamResponse>>;

  /**
   * Deletes a team by its ID.
   */
  teamsTeamIdDelete(
    requestParameters: TeamsTeamIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteTeamResponse>;

  /**
   *
   * @summary Retrieves the linked projects for a team by its ID.
   * @param {number} teamId The unique identifier of the team.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsTeamIdLinkedProjectsGetRaw(
    requestParameters: TeamsTeamIdLinkedProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedProjectsResponse>>;

  /**
   * Retrieves the linked projects for a team by its ID.
   */
  teamsTeamIdLinkedProjectsGet(
    requestParameters: TeamsTeamIdLinkedProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedProjectsResponse>;

  /**
   *
   * @summary Updates a team.
   * @param {number} teamId The id of the team to update.
   * @param {PatchTeamRequest} [patchTeamRequest] The request body containing the details of the team to be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApiInterface
   */
  teamsTeamIdPatchRaw(
    requestParameters: TeamsTeamIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTeamResponse>>;

  /**
   * Updates a team.
   */
  teamsTeamIdPatch(
    requestParameters: TeamsTeamIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTeamResponse>;
}

/**
 *
 */
export class TeamsApi extends runtime.BaseAPI implements TeamsApiInterface {
  /**
   * Gets all teams that match the given filters. Filters are optional.
   */
  async teamsGetRaw(
    requestParameters: TeamsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetTeamResponse>>> {
    const queryParameters: any = {};

    if (requestParameters['teamName'] != null) {
      queryParameters['teamName'] = requestParameters['teamName'];
    }

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetTeamResponseFromJSON),
    );
  }

  /**
   * Gets all teams that match the given filters. Filters are optional.
   */
  async teamsGet(
    requestParameters: TeamsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetTeamResponse>> {
    const response = await this.teamsGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Gets the team with the given id.
   */
  async teamsIdGetRaw(
    requestParameters: TeamsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTeamResponse>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling teamsIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetTeamResponseFromJSON(jsonValue),
    );
  }

  /**
   * Gets the team with the given id.
   */
  async teamsIdGet(
    requestParameters: TeamsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTeamResponse> {
    const response = await this.teamsIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates a new team with the given attributes.
   */
  async teamsPutRaw(
    requestParameters: TeamsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateTeamResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateTeamRequestToJSON(requestParameters['createTeamRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateTeamResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a new team with the given attributes.
   */
  async teamsPut(
    requestParameters: TeamsPutRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateTeamResponse> {
    const response = await this.teamsPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Deletes a team by its ID.
   */
  async teamsTeamIdDeleteRaw(
    requestParameters: TeamsTeamIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteTeamResponse>> {
    if (requestParameters['teamId'] == null) {
      throw new runtime.RequiredError(
        'teamId',
        'Required parameter "teamId" was null or undefined when calling teamsTeamIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams/{teamId}`.replace(
          `{${'teamId'}}`,
          encodeURIComponent(String(requestParameters['teamId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteTeamResponseFromJSON(jsonValue),
    );
  }

  /**
   * Deletes a team by its ID.
   */
  async teamsTeamIdDelete(
    requestParameters: TeamsTeamIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteTeamResponse> {
    const response = await this.teamsTeamIdDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieves the linked projects for a team by its ID.
   */
  async teamsTeamIdLinkedProjectsGetRaw(
    requestParameters: TeamsTeamIdLinkedProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedProjectsResponse>> {
    if (requestParameters['teamId'] == null) {
      throw new runtime.RequiredError(
        'teamId',
        'Required parameter "teamId" was null or undefined when calling teamsTeamIdLinkedProjectsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams/{teamId}/linkedProjects`.replace(
          `{${'teamId'}}`,
          encodeURIComponent(String(requestParameters['teamId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetLinkedProjectsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Retrieves the linked projects for a team by its ID.
   */
  async teamsTeamIdLinkedProjectsGet(
    requestParameters: TeamsTeamIdLinkedProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedProjectsResponse> {
    const response = await this.teamsTeamIdLinkedProjectsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Updates a team.
   */
  async teamsTeamIdPatchRaw(
    requestParameters: TeamsTeamIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTeamResponse>> {
    if (requestParameters['teamId'] == null) {
      throw new runtime.RequiredError(
        'teamId',
        'Required parameter "teamId" was null or undefined when calling teamsTeamIdPatch().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        await this.configuration.apiKey('Authorization'); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/Teams/{teamId}`.replace(
          `{${'teamId'}}`,
          encodeURIComponent(String(requestParameters['teamId'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchTeamRequestToJSON(requestParameters['patchTeamRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetTeamResponseFromJSON(jsonValue),
    );
  }

  /**
   * Updates a team.
   */
  async teamsTeamIdPatch(
    requestParameters: TeamsTeamIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTeamResponse> {
    const response = await this.teamsTeamIdPatchRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
