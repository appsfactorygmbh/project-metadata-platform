/* tslint:disable */
/* eslint-disable */
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SecurityLevel } from './SecurityLevel';
import {
    SecurityLevelFromJSON,
    SecurityLevelToJSON,
} from './SecurityLevel';
import type { CompanyState } from './CompanyState';
import {
    CompanyStateFromJSON,
    CompanyStateToJSON,
} from './CompanyState';
import type { UpdateProjectPluginRequest } from './UpdateProjectPluginRequest';
import {
    UpdateProjectPluginRequestFromJSON,
    UpdateProjectPluginRequestToJSON,
} from './UpdateProjectPluginRequest';

/**
 * Represents a request to create a new project.
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * The name of the project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    projectName: string;
    /**
     * The name of the Business Unit associated with the project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    businessUnit: string;
    /**
     * The number of the team working on the project.
     * @type {number}
     * @memberof CreateProjectRequest
     */
    teamNumber: number;
    /**
     * The name of the department associated with the project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    department: string;
    /**
     * The name of the client for the project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    clientName: string;
    /**
     * Id of the offer associated with project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    offerId: string;
    /**
     * Company responsible for project.
     * @type {string}
     * @memberof CreateProjectRequest
     */
    company: string;
    /**
     * 
     * @type {CompanyState}
     * @memberof CreateProjectRequest
     */
    companyState: CompanyState;
    /**
     * 
     * @type {SecurityLevel}
     * @memberof CreateProjectRequest
     */
    ismsLevel: SecurityLevel;
    /**
     * An optional list of plugins associated to the project.
     * @type {Array<UpdateProjectPluginRequest>}
     * @memberof CreateProjectRequest
     */
    pluginList?: Array<UpdateProjectPluginRequest> | null;
    /**
     * Indicates if the project is archived.
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    isArchived: boolean;
}



/**
 * Check if a given object implements the CreateProjectRequest interface.
 */
export function instanceOfCreateProjectRequest(value: object): value is CreateProjectRequest {
    if (!('projectName' in value) || value['projectName'] === undefined) return false;
    if (!('businessUnit' in value) || value['businessUnit'] === undefined) return false;
    if (!('teamNumber' in value) || value['teamNumber'] === undefined) return false;
    if (!('department' in value) || value['department'] === undefined) return false;
    if (!('clientName' in value) || value['clientName'] === undefined) return false;
    if (!('offerId' in value) || value['offerId'] === undefined) return false;
    if (!('company' in value) || value['company'] === undefined) return false;
    if (!('companyState' in value) || value['companyState'] === undefined) return false;
    if (!('ismsLevel' in value) || value['ismsLevel'] === undefined) return false;
    if (!('isArchived' in value) || value['isArchived'] === undefined) return false;
    return true;
}

export function CreateProjectRequestFromJSON(json: any): CreateProjectRequest {
    return CreateProjectRequestFromJSONTyped(json, false);
}

export function CreateProjectRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateProjectRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'projectName': json['projectName'],
        'businessUnit': json['businessUnit'],
        'teamNumber': json['teamNumber'],
        'department': json['department'],
        'clientName': json['clientName'],
        'offerId': json['offerId'],
        'company': json['company'],
        'companyState': CompanyStateFromJSON(json['companyState']),
        'ismsLevel': SecurityLevelFromJSON(json['ismsLevel']),
        'pluginList': json['pluginList'] == null ? undefined : ((json['pluginList'] as Array<any>).map(UpdateProjectPluginRequestFromJSON)),
        'isArchived': json['isArchived'],
    };
}

export function CreateProjectRequestToJSON(json: any): CreateProjectRequest {
    return CreateProjectRequestToJSONTyped(json, false);
}

export function CreateProjectRequestToJSONTyped(value?: CreateProjectRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'projectName': value['projectName'],
        'businessUnit': value['businessUnit'],
        'teamNumber': value['teamNumber'],
        'department': value['department'],
        'clientName': value['clientName'],
        'offerId': value['offerId'],
        'company': value['company'],
        'companyState': CompanyStateToJSON(value['companyState']),
        'ismsLevel': SecurityLevelToJSON(value['ismsLevel']),
        'pluginList': value['pluginList'] == null ? undefined : ((value['pluginList'] as Array<any>).map(UpdateProjectPluginRequestToJSON)),
        'isArchived': value['isArchived'],
    };
}

