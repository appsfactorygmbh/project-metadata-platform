/* tslint:disable */
/* eslint-disable */
/**
 * ProjectMetadataPlatform.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SecurityLevel } from './SecurityLevel';
import { SecurityLevelFromJSON, SecurityLevelToJSON } from './SecurityLevel';
import type { CompanyState } from './CompanyState';
import { CompanyStateFromJSON, CompanyStateToJSON } from './CompanyState';
import type { UpdateProjectPluginRequest } from './UpdateProjectPluginRequest';
import {
  UpdateProjectPluginRequestFromJSON,
  UpdateProjectPluginRequestToJSON,
} from './UpdateProjectPluginRequest';

/**
 * Represents a request to create a new / update an existing project.
 * @export
 * @interface PutProjectRequest
 */
export interface PutProjectRequest {
  /**
   * The name of the project.
   * @type {string}
   * @memberof PutProjectRequest
   */
  projectName: string;
  /**
   * The name of the client for the project.
   * @type {string}
   * @memberof PutProjectRequest
   */
  clientName: string;
  /**
   * Id of the offer associated with project.
   * @type {string}
   * @memberof PutProjectRequest
   */
  offerId: string;
  /**
   * Company responsible for project.
   * @type {string}
   * @memberof PutProjectRequest
   */
  company: string;
  /**
   * The id of the team that should be assigned to the project.
   * @type {number}
   * @memberof PutProjectRequest
   */
  teamId?: number | null;
  /**
   *
   * @type {CompanyState}
   * @memberof PutProjectRequest
   */
  companyState: CompanyState;
  /**
   *
   * @type {SecurityLevel}
   * @memberof PutProjectRequest
   */
  ismsLevel: SecurityLevel;
  /**
   * An optional list of plugins associated to the project.
   * @type {Array<UpdateProjectPluginRequest>}
   * @memberof PutProjectRequest
   */
  pluginList?: Array<UpdateProjectPluginRequest> | null;
  /**
   * Indicates if the project is archived.
   * @type {boolean}
   * @memberof PutProjectRequest
   */
  isArchived: boolean;
}

/**
 * Check if a given object implements the PutProjectRequest interface.
 */
export function instanceOfPutProjectRequest(
  value: object,
): value is PutProjectRequest {
  if (!('projectName' in value) || value['projectName'] === undefined)
    return false;
  if (!('clientName' in value) || value['clientName'] === undefined)
    return false;
  if (!('offerId' in value) || value['offerId'] === undefined) return false;
  if (!('company' in value) || value['company'] === undefined) return false;
  if (!('companyState' in value) || value['companyState'] === undefined)
    return false;
  if (!('ismsLevel' in value) || value['ismsLevel'] === undefined) return false;
  if (!('isArchived' in value) || value['isArchived'] === undefined)
    return false;
  return true;
}

export function PutProjectRequestFromJSON(json: any): PutProjectRequest {
  return PutProjectRequestFromJSONTyped(json, false);
}

export function PutProjectRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PutProjectRequest {
  if (json == null) {
    return json;
  }
  return {
    projectName: json['projectName'],
    clientName: json['clientName'],
    offerId: json['offerId'],
    company: json['company'],
    teamId: json['teamId'] == null ? undefined : json['teamId'],
    companyState: CompanyStateFromJSON(json['companyState']),
    ismsLevel: SecurityLevelFromJSON(json['ismsLevel']),
    pluginList:
      json['pluginList'] == null
        ? undefined
        : (json['pluginList'] as Array<any>).map(
            UpdateProjectPluginRequestFromJSON,
          ),
    isArchived: json['isArchived'],
  };
}

export function PutProjectRequestToJSON(json: any): PutProjectRequest {
  return PutProjectRequestToJSONTyped(json, false);
}

export function PutProjectRequestToJSONTyped(
  value?: PutProjectRequest | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    projectName: value['projectName'],
    clientName: value['clientName'],
    offerId: value['offerId'],
    company: value['company'],
    teamId: value['teamId'],
    companyState: CompanyStateToJSON(value['companyState']),
    ismsLevel: SecurityLevelToJSON(value['ismsLevel']),
    pluginList:
      value['pluginList'] == null
        ? undefined
        : (value['pluginList'] as Array<any>).map(
            UpdateProjectPluginRequestToJSON,
          ),
    isArchived: value['isArchived'],
  };
}
