stages:
  - test
  - build
  - deploy
  - release

variables:
  DEVELOP_BRANCH: develop

default:
  image: mcr.microsoft.com/dotnet/sdk:8.0
  before_script:
    - "dotnet restore --packages ./.nuget/"
  cache:
    paths:
      - ./.nuget/

include:
  - project: "projekt2024_A_Appsfactory_Project_Metadata_Platform/templates"
    ref: main
    file: "pipeline/all.yml"

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet test --no-restore --configuration Release --test-adapter-path:. --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    when: always
    paths:
      - ./**/*test-result.xml
    reports:
      junit:
        - ./**/*test-result.xml

code-quality:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  variables:
    DOTNET_ROLL_FORWARD: Major
  script:
    - "dotnet tool restore"
    - "dotnet build --configuration Release --packages ./.nuget/"
    - "export DIR=file://$(pwd)"
    - "dotnet tool run cq sarif ProjectMetadataPlatform.Domain/bin/codeanalysis.sarif.json gl-code-quality-report1.json $DIR"
    - "dotnet tool run cq sarif ProjectMetadataPlatform.Application/bin/codeanalysis.sarif.json gl-code-quality-report2.json $DIR"
    - "dotnet tool run cq sarif ProjectMetadataPlatform.Infrastructure/bin/codeanalysis.sarif.json gl-code-quality-report3.json $DIR"
    - "dotnet tool run cq sarif ProjectMetadataPlatform.Api/bin/codeanalysis.sarif.json gl-code-quality-report4.json $DIR"
    - "dotnet tool run cq merge gl-code-quality-report.json gl-code-quality-report1.json gl-code-quality-report2.json gl-code-quality-report3.json gl-code-quality-report4.json"
  artifacts:
    paths:
      - gl-code-quality-report.json
    expose_as: "code_quality_reports"
    reports:
      codequality: gl-code-quality-report.json
  rules:
    - if: $CI_COMMIT_BRANCH

sonarqube:
  stage: test
  image: gitlab.dit.htwk-leipzig.de:5050/projekt2024_a_appsfactory_project_metadata_platform/backend/sonarqube-base
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - '/root/.dotnet/tools/dotnet-sonarscanner begin /k:"Project-Metadata-Platform-Backend" /d:sonar.token="$SONAR_TOKEN" /d:"sonar.host.url=$SONAR_HOST_URL" '
    - "dotnet build --no-incremental --configuration Release --packages ./.nuget/"
    - '/root/.dotnet/tools/dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"'
  allow_failure: true
  # Only run on develop branch since we have analyzers for MRs and the HTWK SonarQube instance does not support MR analysis
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOP_BRANCH
